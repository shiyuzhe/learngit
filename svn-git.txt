svn		集中式版本控制系统	必须联网	
git		分布式版本控制系统					强大的分支管理		本地工作完全不需要考虑远程库的存在。在有网络时把本地提交推送一下就完成可同步。

	分布式管理系统没有“中央服务器”，每个个体都拥有完整的版本库，每个个体都可以充当“中央服务器”
	
	git使用总结：
	初始化一个git仓库  git init;
	添加文件到git仓库：
		1.git add <file>,可以反复多次使用，添加多个文件
		2.git commit ,提交添加的文件。
		
	随时掌握工作区状态 git status
	如果git status告诉你文件被修改 ,使用git diff可查看修改内容。
	
	HEAD指向的版本就是当前版本，因此，git允许我们在版本的历史之间穿梭，使用命令 git reset --head commit_id。
	穿梭前，用git log 可以查看提交历史，以便确定回退到哪个版本。
	要重返未来，用git reflog 查看命令历史，以确定要会到未来的哪个版本。
	
	暂存区：
	git add 命令实际上是把要提交的所有修改放到暂存区（Stage），然后，执行git commit 就可以一次性把暂存区的所有修改提交到分支。
	
	Git追踪并管理的是修改，而非文件。
	修改：新建文件、增删改文件。
	每次修改，如果不add到缓存区，那就不会加入到commit中.
	
	场景1：乱改了文件区某个文件的内容，想丢弃工作区的修改时，用命令 git checkout --  file.
	场景2：乱改了文件区某文件并添加到暂存区，像丢弃暂存区的修改时，用命令git reset HEAD file回退到场景1(git reset 既可以回退版本，也可以把暂存区的修改回退到工作区)
	场景3：已提交不合适的修改到版本库时，想撤销本次提交，使用退回版本。（确保还没有推送到远程库）	
	
	git rm  用于删除一个文件，如果该文件已被提交的版本库，不用担心误删，但恢复该文件只能恢复到最新版，你会丢失最近一次提交后你所做的修改。
	
	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git;
	关联后，使用命令git push origin master推送最新修改；
	
	git鼓励大量使用分支：
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>
	
	当git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。  （解决冲突后创建一个新的提交点，删除分支。）
	
	
	vim使用：
	vi readme.txt 进入vim编辑界面。
	Esc : q/wq  不保存退出/保存退出  （末行模式）
	:w <name>  保存到。